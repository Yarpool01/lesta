def fastest_sort(arr: list) -> list:
    arr.sort()
    return arr

"""
В Python, для сортировки массива чисел любого размера и порядка (в том числе и отсортированного), самым быстрым и универсальным алгоритмом является Timsort, который встроен в метод list.sort()

Плюсы Timsort:
Timsort отлично работает с массивами, которые уже частично отсортированы.
Timsort хорошо обрабатывает массивы с большим количеством повторяющихся элементов.
Для небольших подмассивов и частично отсортированных частей Timsort использует сортировку вставками.
Для больших массивов Timsort переключается на сортировку слиянием, которая гарантирует сложность O(n log n).
Результат времени O(n log n) может проявляться в худшем случае.
O(n) в лучшем случае (Например: Если массив уже отсортирован, Timsort отсортирует его за линейное время O(n)).
Используется по умолчанию в list.sort() и sorted(), что делает его очень удобным.

Минусы Timsort:
Сложность реализации:
В некоторых случаях, Timsort может иметь немного более высокие накладные расходы по сравнению с более простыми алгоритмами.
В случаях когда известны особенности данных или диапазон целых чисел ограничен специализированные алгоритмы могут работать быстрее.
"""